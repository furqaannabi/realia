// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NFT {
  id String @id @default(uuid())
  tokenId String @unique
  address String? @unique
  user User @relation(fields: [userId], references: [id])
  userId String
  image Image @relation(fields: [imageId], references: [id])
  imageId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Verification {
  id String @id @default(uuid())
  verificationId String @unique
  user User @relation(fields: [userId], references: [id])
  userId String
  image Image @relation(fields: [imageId], references: [id])
  imageId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ImageType {
  NFT
  VERIFICATION
}

model Image {
  id String @id @default(uuid())
  ipfsCid String @unique
  s3Key String @unique
  metadataCid String @unique
  qdrantId String @unique
  metadata Json
  nft NFT[]
  verification Verification[]
  type ImageType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Nonce {
  id String @id @default(uuid())
  nonce String @unique
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  session String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  walletAddress String   @unique
  nonce       Nonce[]
  nft NFT[]
  session Session[]
  verification Verification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}